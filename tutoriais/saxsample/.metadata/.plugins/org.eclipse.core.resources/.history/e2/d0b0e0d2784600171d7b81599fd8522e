package br.com.fuctura.handler;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

import br.com.fuctura.model.Municipio;
import br.com.fuctura.model.Municipios;

/**
 * Manipulador de XML baseado em SAX
 * @author douglas.f.filho
 *
 */
public class SAXHandler extends DefaultHandler{
	private Municipios municipios;
	private Municipio municipio;
	
	private String tagAtual;
	
	public SAXHandler(){
		municipios = new Municipios();
		municipio = null;
		tagAtual = "";
	}
	
	private long time = 0;//Variável usada para calcular o tempo usado para realizar a leitura
	
	/**
	 * Método chamado no momento que a SAX lê a primeira linha do arquivo.
	 */
	@Override
	public void startDocument() throws SAXException{
		System.out.println("Inicio da leitura");
		time = System.currentTimeMillis();
	}
	
	/**
	 * Método chamado no momento que o arquivo chega ao fim
	 */
	@Override
	public void endDocument() throws SAXException{
		long now = System.currentTimeMillis();
		long elapsedTime = now - time;
		System.out.println("Leitura realizada em "+elapsedTime+" milisegundos");
	}
	
	@Override
	public void startElement(String uri, String localName, String name, Attributes attributes) throws SAXException{
		
	}
	
	/**
	 * Converte o arquivo passado por parametro em uma lista de municipios
	 * @param arquivo = String que contem o local e nome do arquivo (exemplo: C:\temp\arquivo.xml)
	 * @return = Lista de municipios (Municipios)
	 */
	public Municipios parse(String arquivo){
		try{
			SAXParserFactory factory = SAXParserFactory.newInstance();
			SAXParser parser = factory.newSAXParser();
			parser.parse(arquivo, this);
			return this.municipios;
		}
		catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}
}
